<%
	const es6Template = require("es6-template-strings");
	const StringUtils = require(process.env.PROJECT_ROOT + "/core/helper/StringUtils.js");
	const parseTypeParameters = (column) => {
		if(column.fulltype.indexOf("(") !== -1) {
			return column.fulltype.substr(column.fulltype.indexOf("(")).replace(/\) *(unsigned)$/g, ")");
		}
		return "";
	};

	const printPrimaryKey = (column) => {
		if(column.boundConstraints) {
			let out = "";
			column.boundConstraints.forEach(constraint => {
				if(constraint.columnKey === "PRI") {
					out += "primaryKey: true,";
				}
				if(column.extra.indexOf("auto_increment") === 0) {
					out += "\n				autoIncrement: true,";
				}
			});
			return out;
		} else {
			return "";
		}
	}

	const isPrimaryKey = (column) => {
		let isIt = false;
		if(column.boundConstraints) {
			column.boundConstraints.forEach(constraint => {
				if(constraint.columnKey === "PRI") {
					isIt = true;
				}
			});
		}
		return isIt;
	}

	const getSequelizeTypeLabelFrom = (column) => {
		const columnType = column.type;
		const isForeignKey = column.boundConstraints && column.boundConstraints.reduce((o,item) => "referencedTable" in item || o, false);
		if(isForeignKey) {
			return "referenced-table";
		}
		if(columnType.indexOf("decimal") === 0) {
			return "decimal";
		} else if (columnType.indexOf("double") === 0) {
			return "double";
		} else if (columnType.indexOf("float") === 0) {
			return "float";
		} else if (columnType.indexOf("bit") === 0) {
			return "boolean";
		} else if (columnType.indexOf("bigint") === 0) {
			return "bigint";
		} else if (columnType.indexOf("int") === 0) {
			return "integer";
		} else if (columnType.indexOf("set") === 0) {
			return "enum";
		} else if (columnType.indexOf("enum") === 0) {
			return "enum";
		} else if (columnType.indexOf("geomcollection") === 0) {
			throw new Error("MySQL native type <geomcollection> is not supported.");
		} else if (columnType.indexOf("multipolygon") === 0) {
			throw new Error("MySQL native type <multipolygon> is not supported.");
		} else if (columnType.indexOf("multilinestring") === 0) {
			throw new Error("MySQL native type <multilinestring> is not supported.");
		} else if (columnType.indexOf("multipoint") === 0) {
			throw new Error("MySQL native type <multipoint> is not supported.");
		} else if (columnType.indexOf("geometry") === 0) {
			return "geometry";
			// throw new Error("MySQL native type <geometry> is not supported.");
		} else if (columnType.indexOf("mediumint") === 0) {
			return "bigint";
		} else if (columnType.indexOf("polygon") === 0) {
			throw new Error("MySQL native type <polygon> is not supported.");
		} else if (columnType.indexOf("linestring") === 0) {
			throw new Error("MySQL native type <linestring> is not supported.");
		} else if (columnType.indexOf("point") === 0) {
			throw new Error("MySQL native type <point> is not supported.");
		} else if (columnType.indexOf("timestamp") === 0) {
			return "datetime";
		} else if (columnType.indexOf("datetime") === 0) {
			return "datetime";
		} else if (columnType.indexOf("year") === 0) {
			return "integer";
		} else if (columnType.indexOf("time") === 0) {
			return "time";
		} else if (columnType.indexOf("date") === 0) {
			return "date";
		} else if (columnType.indexOf("longblob") === 0) {
			return "blob";
		} else if (columnType.indexOf("mediumblob") === 0) {
			return "blob";
		} else if (columnType.indexOf("smallint") === 0) {
			return "integer";
		} else if (columnType.indexOf("blob") === 0) {
			return "blob";
		} else if (columnType.indexOf("tinyblob") === 0) {
			return "blob";
		} else if (columnType.indexOf("json") === 0) {
			return "json";
		} else if (columnType.indexOf("longtext") === 0) {
			return "text";
		} else if (columnType.indexOf("mediumtext") === 0) {
			return "text";
		} else if (columnType.indexOf("tinytext") === 0) {
			return "text";
		} else if (columnType.indexOf("varchar") === 0) {
			return "string";
		} else if (columnType.indexOf("char") === 0) {
			return "string";
		} else if (columnType.indexOf("tinyint") === 0) {
			return "integer";
		}
	}

	const getSequelizeTypeFrom = (column) => {
		const columnType = column.type;
		if(columnType.indexOf("decimal") === 0) {
			return "Sequelize.DECIMAL" + parseTypeParameters(column);
		} else if (columnType.indexOf("double") === 0) {
			return "Sequelize.DOUBLE" + parseTypeParameters(column);
		} else if (columnType.indexOf("float") === 0) {
			return "Sequelize.FLOAT" + parseTypeParameters(column);
		} else if (columnType.indexOf("bit") === 0) {
			return "Sequelize.BOOLEAN" + parseTypeParameters(column);
		} else if (columnType.indexOf("bigint") === 0) {
			return "Sequelize.BIGINT" + parseTypeParameters(column);
		} else if (columnType.indexOf("int") === 0) {
			return "Sequelize.INTEGER" + parseTypeParameters(column);
		} else if (columnType.indexOf("set") === 0) {
			return "Sequelize.ENUM" + parseTypeParameters(column);
		} else if (columnType.indexOf("enum") === 0) {
			return "Sequelize.ENUM" + parseTypeParameters(column);
		} else if (columnType.indexOf("geomcollection") === 0) {
			throw new Error("MySQL native type <geomcollection> is not supported.");
		} else if (columnType.indexOf("multipolygon") === 0) {
			throw new Error("MySQL native type <multipolygon> is not supported.");
		} else if (columnType.indexOf("multilinestring") === 0) {
			throw new Error("MySQL native type <multilinestring> is not supported.");
		} else if (columnType.indexOf("multipoint") === 0) {
			throw new Error("MySQL native type <multipoint> is not supported.");
		} else if (columnType.indexOf("geometry") === 0) {
			return "Sequelize.GEOMETRY" + parseTypeParameters(column);
		} else if (columnType.indexOf("mediumint") === 0) {
			return "Sequelize.BIGINT" + parseTypeParameters(column);
		} else if (columnType.indexOf("polygon") === 0) {
			throw new Error("MySQL native type <polygon> is not supported.");
		} else if (columnType.indexOf("linestring") === 0) {
			throw new Error("MySQL native type <linestring> is not supported.");
		} else if (columnType.indexOf("point") === 0) {
			throw new Error("MySQL native type <point> is not supported.");
		} else if (columnType.indexOf("timestamp") === 0) {
			return "Sequelize.DATE" + parseTypeParameters(column);
		} else if (columnType.indexOf("datetime") === 0) {
			return "Sequelize.DATE" + parseTypeParameters(column);
		} else if (columnType.indexOf("year") === 0) {
			return "Sequelize.DATE" + parseTypeParameters(column);
		} else if (columnType.indexOf("time") === 0) {
			return "Sequelize.TIME" + parseTypeParameters(column);
		} else if (columnType.indexOf("date") === 0) {
			return "Sequelize.DATE" + parseTypeParameters(column);
		} else if (columnType.indexOf("longblob") === 0) {
			return "Sequelize.BLOB('long')";
		} else if (columnType.indexOf("mediumblob") === 0) {
			return "Sequelize.BLOB('medium')";
		} else if (columnType.indexOf("smallint") === 0) {
			return "Sequelize.INTEGER('small')";
		} else if (columnType.indexOf("blob") === 0) {
			return "Sequelize.BLOB" + parseTypeParameters(column);
		} else if (columnType.indexOf("tinyblob") === 0) {
			return "Sequelize.BLOB('tiny')";
		} else if (columnType.indexOf("json") === 0) {
			return "Sequelize.JSON" + parseTypeParameters(column);
		} else if (columnType.indexOf("longtext") === 0) {
			return "Sequelize.TEXT('long')";
		} else if (columnType.indexOf("mediumtext") === 0) {
			return "Sequelize.TEXT('medium')";
		} else if (columnType.indexOf("tinytext") === 0) {
			return "Sequelize.TEXT('tiny')";
		} else if (columnType.indexOf("varchar") === 0) {
			return "Sequelize.STRING" + parseTypeParameters(column);
		} else if (columnType.indexOf("char") === 0) {
			return "Sequelize.STRING(1)";
		} else if (columnType.indexOf("tinyint") === 0) {
			return "Sequelize.INTEGER" + parseTypeParameters(column);
		}
	}

	const sortByColumnOrderFactory = (table) => {
		return (a,b) => {
			return (table[a].order > table[b].order) ? 1 : -1;
		}
	};

%>

const Sequelize = require("sequelize");
const { Model } = Sequelize;

class <%-Model%>Definition {

	static get database() {
		return "<%-database%>";
	}

	static get databaseConnection() {
		return "<%-databaseConnection%>";
	}

	static get name() {
		return "<%-Model%>";
	}

	static get table() {
		return "<%-table%>";
	}
	
	<%
	const columnNames = Object.keys(tableContent);
	let tableDataKeys = ["__bound_to_community_by", "__main_table", "__attached_models"];
	let tableData = {};
	let primaryKeyColumn = "id"; // IT IS MANDATORY TO SET 1 UNIQUE PRIMARY + AUTOINCREMENT FOR EACH TABLE.
	%>

	static get columns() {
		return {<%
		if(columnNames.length) {
			columnNames.sort(sortByColumnOrderFactory(tableContent)).forEach(columnName => {
				const column = tableContent[columnName];
				if(isPrimaryKey(column)) {
					primaryKeyColumn = columnName;
				}
				tableDataKeys.forEach(key => {
					if(key in column) {
						tableData[key] = column[key];
					}
				});
				%>
			<%-columnName%>: {
				<%-printPrimaryKey(column)%>
				type: <%-column.$type = getSequelizeTypeFrom(column)%>,
				field: <%-column.$field = JSON.stringify(columnName)%>,
				allowNull: <%-column.$nullable = column.nullable === "YES" ? "true" : "false" %>,
				defaultValue: <%
					if(typeof (column.default) === "number") {
						%><%-column.$default = column.default + (column.unsigned ? ".UNSIGNED" : "") + (column.zerofill ? ".ZEROFILL" : "")%><%;
					} else if(column.default === null || column.default === "null") {
						column.$default = null;
						%>null<%;
					} else {
						column.$default = column.default;
						column.$default += column.extra && column.extra.indexOf("DEFAULT_GENERATED") === 0 ? 
							column.extra.substr(17) : "";
						%>Sequelize.literal(<%-JSON.stringify(column.$default)%>)<%
					}
				%>,<%
				if(column.unsigned) {
					column.$unsigned = true;
				%>
				unsigned: true,<%
				}
				if(column.maxLength) {
				%>
				maxCharacters: <%-column.$maxCharacters = column.maxLength%>,<%
				}
				if(column.numericPrecision) {
				%>
				maxDigits:  <%-column.$maxDigits = column.numericPrecision%>,<%
				}
				if(column.zerofill) {
					$column.$zerofill = true;
				%>
				zerofill: true,<%
				}%>
				timestamps: false,
				underscored: true,
				<%
					const seqType = getSequelizeTypeFrom(column);
					const seqLabel = getSequelizeTypeLabelFrom(column);
				%>
				__type_code: <%-column.$typeCode = JSON.stringify(seqType)%>,
				__full_type: <%-column.$fullType = JSON.stringify(column.fulltype)%>,
				__type_label: <%-column.$typeLabel = JSON.stringify(seqLabel)%>,
				<%
					if(seqLabel === "enum") { 
						%>
				__form_enum_list: <%- parseTypeParameters(column).replace(/^\(/g,"[").replace(/\)$/g, "]") %>,
					<% }
				%>
				<%
				for(let prop in column) {
					if(prop.startsWith("__")) {
						let condition = typeof column[prop] === "object" && column[prop] !== null && typeof column[prop].$type === "string" && column[prop].$type === "es6template";
						if(condition) {
							let originalResult = es6Template(column[prop].$value, {
								label: getSequelizeTypeLabelFrom(column),
								prop,
								table,
								columnName,
								column,
								getSequelizeTypeLabelFrom,
								StringUtils,
								require: require,
							});
							let finalResult = undefined;
							try {
								finalResult = JSON.parse(originalResult);
							} catch(error) {
								//
							}
							column["$" + StringUtils.camelize(prop, false)] = finalResult || originalResult;
				%><%-JSON.stringify(prop)%>: <%-originalResult%>,
				<%		} else {
					column["$" + StringUtils.camelize(prop, false)] = column[prop];
				%><%-JSON.stringify(prop)%>: column[prop]%>,
				<%		}
					}
				}
				%>
			},<%
			});%>
		<%}
		%>};
	}

	static get innerRelationships() {
		return [<%
			if(columnNames.length) {
				columnNames.sort(sortByColumnOrderFactory(tableContent)).forEach(columnName => {
					const column = tableContent[columnName];
					if(column.boundConstraints) {
						column.$formColumnConstraints = column.boundConstraints;
						column.boundConstraints.forEach(constraint => {
							const { columnKey, boundConstraint, referencedTable = null, referencedColumn = null } = constraint;
			%>
			{ 
				table: "<%-table%>",
				column: "<%-columnName%>", 
				constraint: "<%-boundConstraint%>"<%
							if(referencedTable) {%>,
				referencedTable: "<%-referencedTable%>",
				referencedColumn: "<%-referencedColumn%>"<%
							}
			%>},<%
						});
					}
				});
			}
		%>];
	}

	static get outerRelationships() {
		return [<%
			Object.keys(databaseContent).forEach(tableName => {
				if(tableName === table) {
					return;
				}
				const outerTable = databaseContent[tableName];
				Object.keys(outerTable).forEach(columnName => {
					const column = outerTable[columnName];
					if(column.boundConstraints) {
						column.boundConstraints.forEach(constraint => {
							const { columnKey, boundConstraint, referencedTable = null, referencedColumn = null } = constraint;
							if(referencedTable === table) {
			%>
			{ 
				table: "<%-tableName%>",
				column: "<%-columnName%>", 
				constraint: "<%-boundConstraint%>"<%
							if(referencedTable) {%>,
				referencedTable: "<%-referencedTable%>",
				referencedColumn: "<%-referencedColumn%>"<%
							}
			%>},<%
							}
						});
					}
				});
			});
		%>];
	}

	static get allRelationships() {
		return [...this.innerRelationships, ...this.outerRelationships];
	}

	static getPublicColumns() {
		return Object.keys(this.columns).reduce((result,column) => {
			if(this.columns[column].__hidden === true || this.columns[column].__shown === false) {
				//
			} else {
				result[column] = this.columns[column];
			}
			return result;
		}, {});
	}

	static getPublicColumnNames() {
		return Object.keys(this.getPublicColumns());
	}

	static getPublicDefinition() {
		return {
			table: this.table,
			name: this.name,
			columns: this.getPublicColumns(), 
			innerRelationships: this.innerRelationships,
			outerRelationships: this.outerRelationships
		};
	}

	<%
	
	if(tableData.__bound_to_community_by) { %>

	static getCommunityBoundaries() {
		return <%-JSON.stringify(tableData.__bound_to_community_by, null, 4)%>;
	}

	<% } %>

	static isMainTable() {
		return <%-!!tableData.__main_table;%>;
	}

	static getAttachedModelBoundaries() {
		return <%-JSON.stringify(tableData.__attached_models || {}, null, 4);%>;
	}

	static get primaryKeyColumn() {
		return <%-JSON.stringify(primaryKeyColumn);%>
	}

}

class Base<%-Model%> extends Model {
	
	static get definition() {
		return <%-Model%>Definition;
	}
	
}

module.exports = Base<%-Model%>;